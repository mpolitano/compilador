/* Contiene los casos de test para el compilador C-TDS
 * Necesita el archivo libtestCTDS.c e input
 * en el archivo output se encuentran las salidas esperadas
 * */

class testing{

// retorna el factorial de v 
int factorial (int v){
  int limit;
  limit = 15;
  if ( v > limit) { return -1;}
  { 
	int c, fact;
	c = 0;
	fact = 1;
    while (c<v){
       c = c+1;
       fact = fact*c;
    }
    return fact;
  }
}

// retorna el factorial de v
int factorialFor (int v){
  int limit;
  limit = 15;
  if ( v > limit) { return -1;}
  { 
	int c, fact; 
	c = 1;
	fact = 1;
    
    for c=1 , v {      
            fact = fact*c;
        }
    return fact;
  }
} 


// retorna el factorial de la parte entera de v
float factorialF (float v){
  float limit;
  limit = 15.0;
  if ( v > limit ) { return -1.0; }
    
  {
    float c, fact;
    c =    0.0;
    fact = 1.0;
    while (c<v) {
	    c = c+1.0; 
        fact = fact*c;
    }
    return  fact;
  }
}

// Calcula el factorial de 0 a 14 y retorna el factorial de v
int factorialArray (int v){
  int limit;
  limit = 15;
  
  { int i;
    int arr_fact[15];
    i=0;
    while (i<limit){
       int c, fact;
       c = 0;
       fact = 1;
       while (c<i){
          c = c+1;
          fact = fact*c;
       }
       arr_fact[i]=fact;  
       i=i+1;
    }
    if ( v > limit-1) {return -1;} 
    else {return arr_fact[v];}
  }
}

// retorna el n esimo primo
int nthprime (int n) {
    int i;
    int divs;
    i = 0;
    divs = 2;
    n = n +1;
    while ( n > 0) {
      boolean divides;
      divides = false;
      i = i + 1;
      while ( !divides && divs < i) {
       if ( i % divs == 0)
         { divides = true; }
       else
         { divs = divs + 1; }
      }
      divs = 2;
      if ( ! divides)
        { n = n - 1; }
    }
    return i;
}

// calcula los primeros 100 primos y retorna el n esimo
int nthprimeArray (int n) {

  int j, arr[100];
    j = 0;
    
  while (j<100){
    arr[j]= nthprime(j); 
    j=j+1;
  } 
  return arr[n-1];
}

// retorna la representacion de d en binario
int int2bin(int d){
   int acum, aux, i;
   acum=0;
   i=0;

   while (true){
      if(d>0){               
        aux = d % 2;   // toma el ultimo digito
        { int j;
          j=0;   
                            
          while (true){    // ubica el digito en la posicion que le corresponde
             if (j<i){
               aux = aux * 10;  
               j=j+1;
               continue;  
             } 
             else { break; }
          }
         }     			

          acum=acum +aux;  // resultado parcial 
          i=i+1;           
          d=d/2;           // toma el resto del numero decimal
          continue;  
       }
       else { break; }

       { int j;
         j=0;
                            
         while (true){         // ubica el ultimo digito en la posicion que corresponde
            if (j<i){
              d = d * 10;
              j=j+1;
              continue;  
            } 
            else { break; }
         }   	
	   }
	}   
	return acum + d;  // resultaod final y retorna
}

// retorna el maximo comun divisor de a y b,
int gcd (int a, int b) {
	int i;
	int result;
	i=1;
	result=i;
	while ( i < (a+b)) {
		if (((a % i) == 0) &&  ((b%i) ==0 ))
			{ result = i; }
		i = i + 1;
	}
	return result;
}

/* Calcula el valor del real m elevado a la n*/
float potenciaR(float m, int n){
	int i;
	float acum;
	acum=1.0;
	i=1;
	while (true){
		if(i<n || i==n){
			acum=acum * m;
			i=i+1;
		}
		else { break;}
	} 
	return(acum);  
}

// invoca varias funciones
void test(){
    float aux;
    aux = 2.0; 
    externinvk("print_int",void,gcd(factorial(3),factorial(4)));
    externinvk("print_int",void,nthprimeArray(gcd(factorial(3),factorial(4))));
    
    aux = potenciaR(aux,nthprimeArray(gcd(factorial(3),factorial(4))));
    externinvk("print_float",void,aux);
}

// invoca test
void test1(){
    float aux;
    aux = 2.0; 
    test();
	externinvk("print_float",void,aux);
}

// funcion main 
void main (){
       
        int x, i; 
	externinvk("init_input",void,"input"); 

// test factorial entero    
        externinvk("print_string",void,"Factorial Enteros----------------------------------");    
        x=externinvk("get_int",int); // lee la cantidad de veces que ejecutara la funcion  
        i = 0;        
        while (i<x){              
            int aux;         
            aux=externinvk("get_int",int); // lee los datos para invocar a la funcion
            aux = factorial(aux);
            externinvk("print_int",void,aux);             
            i += 1;
	    }
		externinvk("print_string",void,"---------------------------------------------------------");
		
// test factorial real 
		externinvk("print_string",void,"Factorial Reales----------------------------------");
        x=externinvk("get_int",int);  
        i = 0;
        while (i<x){
            float aux;
            aux=externinvk("get_float",float);
            aux = factorialF(aux);
            externinvk("print_float",void,aux); 
            i += 1;
	    }
		externinvk("print_string",void,"---------------------------------------------------------");

// test factorial array entero    
        externinvk("print_string",void,"Factorial Array Enteros----------------------------------");    
        x=externinvk("get_int",int); // lee la cantidad de veces que ejecutara la funcion  
        i = 0;        
        while (i<x){              
            int aux;         
            aux=externinvk("get_int",int); // lee los datos para invocar a la funcion
            aux = factorialArray(aux);
            externinvk("print_int",void,aux);             
            i += 1;
	    }
		externinvk("print_string",void,"---------------------------------------------------------");

// test nthprime entero    
        externinvk("print_string",void,"Nthprime Enteros----------------------------------");    
        x=externinvk("get_int",int); // lee la cantidad de veces que ejecutara la funcion  
        i = 0;        
        while (i<x){              
            int aux;         
            aux=externinvk("get_int",int); // lee los datos para invocar a la funcion
            aux = nthprime(aux);
            externinvk("print_int",void,aux);             
            i += 1;
	    }
		externinvk("print_string",void,"---------------------------------------------------------");

// test nthprime array entero    
        externinvk("print_string",void,"Nthprime Array Enteros----------------------------------");    
        x=externinvk("get_int",int); // lee la cantidad de veces que ejecutara la funcion  
        i = 0;        
        while (i<x){              
            int aux;         
            aux=externinvk("get_int",int); // lee los datos para invocar a la funcion
            aux = nthprimeArray(aux);
            externinvk("print_int",void,aux);             
            i += 1;
	    }
		externinvk("print_string",void,"---------------------------------------------------------");

// test int2bin entero    
        externinvk("print_string",void,"Int2Bin Enteros----------------------------------");    
        x=externinvk("get_int",int); // lee la cantidad de veces que ejecutara la funcion  
        i = 0;        
        while (i<x){              
            int aux;         
            aux=externinvk("get_int",int); // lee los datos para invocar a la funcion
            aux = int2bin(aux);
            externinvk("print_int",void,aux);             
            i += 1;
	    }
		externinvk("print_string",void,"---------------------------------------------------------");

// test gcd entero    gc
        externinvk("print_string",void,"GCD Enteros----------------------------------");    
        x=externinvk("get_int",int); // lee la cantidad de veces que ejecutara la funcion  
        i = 0;        
        while (i<x){              
            int aux;// lee los datos para invocar a la funcion
            aux = gcd(externinvk("get_int",int),externinvk("get_int",int));
            externinvk("print_int",void,aux);             
            i += 1;
	    }
		externinvk("print_string",void,"---------------------------------------------------------");

// test test    
        externinvk("print_string",void,"test----------------------------------");    
        test();
		externinvk("print_string",void,"---------------------------------------------------------");


// test test1    
        externinvk("print_string",void,"test1----------------------------------");    
        test1();
		externinvk("print_string",void,"---------------------------------------------------------");

        externinvk("close_input",void);

} // endmain

}
