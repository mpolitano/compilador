 
   
/* ---------------Seccion de statament_star preliminares--------------------*/
package compilador;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            analizadorSintactico a = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = a.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};

   
   
/* ------------statament de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal  BOOLEAN, BREAK, CLASS, CONTINUE, ELSE, 
          FALSE, FLOAT, FOR, IF, RETURN, TRUE, VOID, WHILE, LOWEREQUAL, 
          HIGHEREQUAL, HIGHER, LOWER, PLUS,SUB,MULT,DIVI,MOD, EQUAL,DIFFERENT, 
          PARENIZQ, PARENDER, PUNTOCOMA, COMA, NEG, OR, AND, INT, FLOAT, 
          BOOLEAN, LLAB, LLCE, CORAB, CORCER, ID, STRING, FLOAT, ASIGPLUS,ASIG,ASSIGSUB,EXTERNINVK;

non terminal   non terminal program, field_decl_star, method_decl_star, field_decl, field_plus, field,method_decl
              return_type, parameters, parameter_plus2, parameter_plus, block,statament_star, type, statament,
              else_optional, expr_opcional, assing_op, method_call, expr_coma_optional, expresiones, expresiones2,
              externinvk_opcional,externivks, externivks2, externinvk_arg, location, location2, expr,
              bin_op, arit_op, rel_op, eq_op, literal;

   

/* -------------Seccion de predencia y asociacion de los terminales----------- */
  
precedence left EQUAL, AND, NEG, DIFFERENT;
precedence left OR;
precedence left HIGHER, LOWER, LOWEREQUAL, HIGHEREQUAL;
precedence left PLUS, SUB;             
precedence left MULT, DIVI, MOD;           

/* ------------------- Seccion de la gramatica ------------------------ */
   
/* La gramatica de nuestro analizador.*/


start with program;

program: 	CLASS ID LLAB field_decl_star method_decl_star LLCER ;

field_decl_star ::= 	field_decl field_decl_star
						          |;

field_decl ::=	type field_plus;

field_plus::=	field field_plus| field;

field::=  ID field_2;

field_2 ::=  ID CORAB INT CORCER COMA
            |;

method_decl_star ::=   method_decl method_decl_star
                        |;

method_decl: 	return_type ID PARENDER parameterS  PARENIZQ block;

return_type:	type
			|VOID;

parameterS:	parameter_plus 
					|;

parameter_plus:	parameter COMA parameter_plus | parameter

parameter:	type ID
  
block::=  LLAB field_decl_star statament_star LLCER;

statament_star::= statament statament_star 
						|;


type: ENTERO|STRING|literal_boolean;

literal_boolean ::= TRUE | FALSE;


statament::= 	location assing_op expr PUNTOCOMA
  				| method_call PUNTOCOMA
  				| IF PARENIZQ expr PARENDER block else_optional
  				| FOR ID ASSIG expr COMA expr block
			    | WHILE expr block
			    | RETURN expr_optional PUNTOCOMA 
			    | BREAK PUNTOCOMA
			    | CONTINUE PUNTOCOMA
			    | PUNTOCOMA
			    | BLOCK ;


else_optional ::= ELSE block
					|;					

expr_optional ::=	expr
					|;

assing_op ::= ASSIG | ASIGPLUS | ASSIGSUB;

method_call ::= ID PARENIZQ expr_coma_optional PARENDER
					| EXTERNINVK PARENIZQ STRING COMA return_type externinvk_opcional PARENDER;


expr_coma_optional ::= expr_plus 
                    |;

expr_plus ::= expr COMA expr_plus | expr


externinvk_opcional:  COMA externivk_plus
                      |;

externinvk_plus:	externinvk_arg COMA externinvk_plus | externinvk_arg;

externinvk_arg::= expr | STRING;

location ::= ID location2;

location2 ::= CORAB expr CORCER
				|;

expr ::= 		location
  				| method_call
  				| literal
  				| expr bin_op expr
			    | SUB expr
			    | NEG expr
			    | PARENIZQ expr PARENDER;


bin_op ::= arit_op | rel_op | eq_op | cond_op;

arith_op ::= PLUS|SUB|MULT|DIVI|MOD;

rel_op ::= HIGHER|HIGHEREQUAL|LOWER|LOWEREQUAL;

eq_op ::= EQUAL | DIFFERENT

cond_op ::= AND|OR;

literal ::= ENTERO|BOOLEAN|FLOAT;